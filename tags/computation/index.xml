<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>computation on Alejandro R. Urzúa</title>
    <link>https://rurz.github.io/tags/computation/</link>
    <description>Recent content in computation on Alejandro R. Urzúa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://rurz.github.io/tags/computation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>When zero-coefficients don&#39;t the recursions terms</title>
      <link>https://rurz.github.io/post/zero_coeffs/</link>
      <pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://rurz.github.io/post/zero_coeffs/</guid>
      <description>Imagine you have a three-term recursion like this one
$$ g_{k+1} = A(l,k) g_{k} + B(l,k) g_{k-1},$$
where the \(g\)&amp;rsquo;s are items of the recursion, and \(A(l, k)\) and \(B(l, k)\) are coefficients who depends on some index \(l\). When we compute the recursion, the algorithm expects that the previous items are already calculated, but imagine this
g[1] = &amp;quot;some initial function&amp;quot; for k in 1:N g[k + 1] = A(l,k) g[k] + B(l,k) g[k - 1] end where we don&amp;rsquo;t know the value of g[(k = 1) - 1] = g[0].</description>
    </item>
    
    <item>
      <title>A seemly definition of the Kravchuk function on JuliaLang</title>
      <link>https://rurz.github.io/post/kravchuk_issues_julia/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://rurz.github.io/post/kravchuk_issues_julia/</guid>
      <description>Intro I&amp;rsquo;ve been used Julia on a daily basis for almost a year. Since the start one of my purposes was to get the Kravchuk function \(\Phi_{n}^{(j)}(q) \) correctly for at least 64 points, that is \(j = 32\). Since I came from Python and there the mpmath returns Hypergeometric functions without hesitation, I look for some like this in Julia. HypergeometricFunctions.jl is the (only?) package to bring the hyperthing \(_2F_1\).</description>
    </item>
    
  </channel>
</rss>
